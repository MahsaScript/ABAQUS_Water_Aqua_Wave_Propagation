# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.005), 
    point2=(-0.5, 0.04))
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.265), 
    point2=(-0.04, 0.04))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(-0.5, 0.04))
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.3), 
    point2=(-0.051748014986515, 0.04))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(
    -0.051748014986515, 0.225), point2=(-0.205, 0.04))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(-0.5, 0.04))
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.42), 
    point2=(-0.04, 0.04))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.04, 0.42), 
    point2=(0.0, 0.37))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.04, 0.285), 
    point2=(-0.2, 0.04))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.04, 0.355), 
    point2=(-0.241956353187561, 0.04))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[12], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.241956353187561, 
    0.04), point2=(-0.5, 0.04))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[16])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.5, 0.04), point2=
    (-0.5, 0.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.5, 0.0), point2=(
    0.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[18])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[18])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    0.0, 0.37))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[19])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[19])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.37), point2=(
    0.04, 0.37))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[20])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[19], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[20])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.04, 0.37), point2=
    (0.04, 0.42))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[21])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[20], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[21])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.04, 0.42), point2=
    (0.0, 0.42))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[22])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[21], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[22])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.42), point2=(
    -0.04, 0.42))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[23])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[22], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[23])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.04, 0.42), 
    point2=(-0.04, 0.355))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[24])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[23], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[24])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.04, 0.355), 
    point2=(-0.241956353187561, 0.04))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.241956353187561, 
    0.04), point2=(-0.2, 0.04))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[26])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.2, 0.04), point2=
    (-0.04, 0.285))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.04, 0.285), 
    point2=(-0.04, 0.04))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[28])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.04, 0.04), 
    point2=(-0.2, 0.04))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[29])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[28], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[29])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(-0.5, 0.04))
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.34), 
    point2=(-0.04, 0.04))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.34), 
    point2=(0.06, 0.3))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    -0.5, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.5, 0.0), point2=(
    -0.5, 0.0449999999627471))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.5, 
    0.0449999999627471), point2=(-0.0449999999627471, 0.0449999999627475))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.0449999999627471, 
    0.0449999999627475), point2=(-0.0449999999627475, 0.38))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.0449999999627475, 
    0.38), point2=(0.0649999999720603, 0.38))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0649999999720603, 
    0.38), point2=(0.0649999999720598, 0.334999999981374))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0649999999720598, 
    0.334999999981374), point2=(0.0, 0.334999999981374))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 
    0.334999999981374), point2=(0.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseSolidExtrude(depth=0.1, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-1'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
del mdb.models['Model-1'].parts['Part-1']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    -0.5, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.5, 0.0), point2=(
    -0.5, 0.0449999999627471))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.5, 
    0.0449999999627471), point2=(-0.145, 0.0449999999627475))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.145, 
    0.0449999999627475), point2=(0.0, 0.4))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.4), point2=(
    0.0566980242729187, 0.4))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0566980242729187, 
    0.4), point2=(0.0566980242729187, 0.36))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0566980242729187, 
    0.36), point2=(0.0145219564437866, 0.36))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0145219564437866, 
    0.36), point2=(0.0, 0.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='cantilever_slab', 
    type=DEFORMABLE_BODY)
mdb.models['Model-1'].parts['cantilever_slab'].BaseSolidExtrude(depth=0.1, 
    sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
# Save by mofid on 2024_07_09-14.22.56; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['cantilever_slab'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['cantilever_slab'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['cantilever_slab'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['cantilever_slab'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['cantilever_slab'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['cantilever_slab'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.145, 0.285), 
    point2=(-0.26, -0.125))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='wave', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['wave'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='Material-Slab')
mdb.models['Model-1'].materials['Material-Slab'].Density(table=((2500.0, ), ))
mdb.models['Model-1'].materials['Material-Slab'].Elastic(table=((32500000000.0, 
    0.3), ))
mdb.models['Model-1'].Material(name='Material-wave')
mdb.models['Model-1'].materials['Material-wave'].Density(table=((997.0, ), ))
mdb.models['Model-1'].materials['Material-wave'].Elastic(table=((2200000000.0, 
    0.5), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='Material-Slab', name=
    'Section-slab', thickness=None)
mdb.models['Model-1'].parts['cantilever_slab'].Set(cells=
    mdb.models['Model-1'].parts['cantilever_slab'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-slab')
mdb.models['Model-1'].parts['cantilever_slab'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['cantilever_slab'].sets['Set-slab'], 
    sectionName='Section-slab', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].HomogeneousSolidSection(material='Material-wave', name=
    'Section-2', thickness=None)
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='Material-wave', name='Section-wave', 
    nodalThicknessField='', numIntPts=1, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=0.3, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].sections['Section-wave'].RebarLayers(layerTable=(
    LayerProperties(barArea=0.24, orientationAngle='0.2,0,0', barSpacing=0.001, 
    layerPosition=-0.2, extensionRatio=0.1, radius=0.3, layerName='wave_layer', 
    material='Material-wave'), ), rebarSpacing=LIFT_EQUATION)
# Save by mofid on 2024_07_09-14.41.47; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['wave'].Set(faces=
    mdb.models['Model-1'].parts['wave'].faces.getSequenceFromMask(('[#1 ]', ), 
    ), name='Set-wave')
mdb.models['Model-1'].parts['wave'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['wave'].sets['Set-wave'], sectionName=
    'Section-wave', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['wave'].Set(faces=
    mdb.models['Model-1'].parts['wave'].faces.getSequenceFromMask(('[#1 ]', ), 
    ), name='Set-wave')
mdb.models['Model-1'].CircularProfile(name='Profile-1', r=0.5)
# Save by mofid on 2024_07_09-14.44.49; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'cantilever_slab-1', part=mdb.models['Model-1'].parts['cantilever_slab'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='wave-1', part=
    mdb.models['Model-1'].parts['wave'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('wave-1', ), vector=
    (-0.4675, 0.17, 0.1))
# Save by mofid on 2024_07_09-14.47.35; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(-0.1775, 
    0.0, 0.0), axisPoint=(-0.3225, 0.045, 0.1), instanceList=('wave-1', ))
# Save by mofid on 2024_07_09-14.49.18; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.rotate(angle=-180.0, axisDirection=(0.5825, 
    0.0, 0.0), axisPoint=(-0.7275, 0.045, 0.1), instanceList=('wave-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('wave-1', ), vector=
    (0.0, 0.0, -0.41))
mdb.models['Model-1'].rootAssembly.instances['wave-1'].translateTo(clearance=
    1.0, direction=(0.900813503536035, -0.178182890809325, -0.395961979576279), 
    fixedList=(
    mdb.models['Model-1'].rootAssembly.instances['cantilever_slab-1'].faces[1], 
    ), movableList=(
    mdb.models['Model-1'].rootAssembly.instances['wave-1'].faces[0], ))
mdb.models['Model-1'].rootAssembly.instances['wave-1'].translateTo(clearance=
    1.0, direction=(0.955382396651526, -0.294789196234058, 0.0185420050713181), 
    fixedList=(
    mdb.models['Model-1'].rootAssembly.instances['cantilever_slab-1'].faces[1], 
    ), movableList=(
    mdb.models['Model-1'].rootAssembly.instances['wave-1'].faces[0], ))
#* The two part instances do not touch when moved
#* along the specified direction.
mdb.models['Model-1'].rootAssembly.translate(instanceList=('wave-1', ), vector=
    (0.723313, -0.178183, -0.395962))
mdb.models['Model-1'].rootAssembly.rotate(angle=-200.0, axisDirection=(0.0, 
    -0.045, 0.0), axisPoint=(-0.5, 0.045, 0.1), instanceList=('wave-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=-100.0, axisDirection=(
    -0.520804, 0.0, -0.346756), axisPoint=(0.020804, 0.045, 0.346756), 
    instanceList=('wave-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=20.0, axisDirection=(-0.520804, 
    -0.045, -0.246756), axisPoint=(0.020804, 0.045, 0.346756), instanceList=(
    'wave-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=20.0, axisDirection=(-0.262374, 
    -0.221358, -0.118032), axisPoint=(-0.237626, 0.266358, 0.118032), 
    instanceList=('wave-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=20.0, axisDirection=(-0.262374, 
    -0.221358, -0.118032), axisPoint=(-0.237626, 0.266358, 0.118032), 
    instanceList=('wave-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=-30.0, axisDirection=(
    -0.212239, 0.029862, -0.396821), axisPoint=(-0.287761, 0.015138, 0.496821), 
    instanceList=('wave-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=10.0, axisDirection=(-0.264601, 
    -0.157492, -0.453059), axisPoint=(-0.235399, 0.202492, 0.553059), 
    instanceList=('wave-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('wave-1', ), vector=
    (-0.264601, -0.157492, -0.453059))
# Save by mofid on 2024_07_09-14.58.02; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.instances['cantilever_slab-1'].vertices[3])
# Save by mofid on 2024_07_09-14.58.40; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['wave'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['wave'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['wave'].features['Shell planar-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['wave'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['wave'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['wave'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].Spot(point=(-0.06, 0.08))
# Save by mofid on 2024_07_09-14.59.54; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.instances['wave-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['wave-1'].edges[2], MIDDLE))
mdb.models['Model-1'].ImplicitDynamicsStep(initialInc=0.01, maxInc=0.01, 
    minInc=0.0001, name='dynamic', nlgeom=ON, previous='Initial', timePeriod=
    10.0)
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='dynamic', 
    distributionType=UNIFORM, field='', magnitude=-400.0, name='fdd', region=
    Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['cantilever_slab-1'].faces.getSequenceFromMask(
    mask=('[#8 ]', ), )))
mdb.models['Model-1'].loads['fdd'].setValues(magnitude=400.0)
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='dynamic', 
    distributionType=UNIFORM, field='', magnitude=400.0, name='Load-2', region=
    Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['cantilever_slab-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='dynamic', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-1', region=Region(referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[7], )), u1=0.0, u2=0.0, 
    u3=0.0, ur1=0.0, ur2=0.0, ur3=0.0)
mdb.models['Model-1'].boundaryConditions['BC-1'].move('dynamic', 'Initial')
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(region=Region(
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[6], )))
mdb.models['Model-1'].parts['wave'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.041)
mdb.models['Model-1'].parts['wave'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=EXPLICIT, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3R, elemLibrary=EXPLICIT)), 
    regions=(mdb.models['Model-1'].parts['wave'].faces.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['wave'].generateMesh()
mdb.models['Model-1'].parts['cantilever_slab'].setElementType(elemTypes=(
    ElemType(elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['cantilever_slab'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['cantilever_slab'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.04)
mdb.models['Model-1'].parts['cantilever_slab'].generateMesh()
# Save by mofid on 2024_07_09-15.14.57; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Problem when parsing keyword: REBARLAYER     Invalid value "0."2,0,0"" for parameter "orientation". The value may be misspelled, obsolete, or invalid.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Problem when parsing keyword: ORIENTATION     Invalid value "0."2,0,0"" for parameter "name". The value may be misspelled, obsolete, or invalid.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A SHELL ELEMENT MUST HAVE MORE THAN ONE INTEGRATION POINT TO CALCULATE BENDING STIFFNESS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Error message limit reached. No further error messages will be reported.\nPlease see the dat file for more errors.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.models['Model-1'].sections['Section-wave'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Material-wave', 
    nodalThicknessField='', numIntPts=1, preIntegrate=OFF, thickness=0.3, 
    thicknessField='', thicknessType=UNIFORM)
mdb.models['Model-1'].sections['Section-wave'].rebarLayers.setValues(
    layerTable=(LayerProperties(barArea=0.24, orientationAngle=10.0, 
    barSpacing=0.001, layerPosition=-0.2, extensionRatio=0.1, radius=0.3, 
    layerName='wave_layer', material='Material-wave'), ), rebarSpacing=
    LIFT_EQUATION)
# Save by mofid on 2024_07_09-15.17.56; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.models['Model-1'].sections['Section-wave'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=GAUSS, material='Material-wave', 
    nodalThicknessField='', numIntPts=15, preIntegrate=OFF, thickness=0.3, 
    thicknessField='', thicknessType=UNIFORM)
mdb.models['Model-1'].sections['Section-wave'].rebarLayers.setValues(
    layerTable=(LayerProperties(barArea=0.24, orientationAngle=10.0, 
    barSpacing=0.001, layerPosition=-0.2, layerName='wave_layer', 
    material='Material-wave'), ), rebarSpacing=CONSTANT)
# Save by mofid on 2024_07_09-15.21.33; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'POSITION OF REBAR IN THE SHELL SECTION THICKNESS DIRECTION IS GIVEN AS THE DISTANCE OF THE REBAR FROM THE MIDDLE SURFACE OF THE SHELL. REBAR WAVE_LAYER LIES OUTSIDE THE SHELL SECTION THICKNESS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['dynamic'].setValues(initialInc=0.001)
# Save by mofid on 2024_07_09-15.23.36; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(u1=UNSET)
mdb.models['Model-1'].boundaryConditions['BC-1'].setValuesInStep(stepName=
    'dynamic', u1=-0.4)
# Save by mofid on 2024_07_09-15.26.02; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*** Error: Extend failed (utl_File: SetEndOfFile) error: There is not enough space on the disk.\n  file: C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'ERROR DURING PART, INSTANCE AND ASSEMBLY PROCESSING', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
# Save by mofid on 2024_07_09-15.27.12; build 2023 2022_09_28-21.41.55 183150
# Save by mofid on 2024_07_09-15.28.54; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'XML parsing failure for job Job-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'POSITION OF REBAR IN THE SHELL SECTION THICKNESS DIRECTION IS GIVEN AS THE DISTANCE OF THE REBAR FROM THE MIDDLE SURFACE OF THE SHELL. REBAR WAVE_LAYER LIES OUTSIDE THE SHELL SECTION THICKNESS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-1'].deactivate('dynamic')
mdb.models['Model-1'].boundaryConditions['BC-1'].reset('dynamic')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='dynamic', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-2', region=Region(
    vertices=mdb.models['Model-1'].rootAssembly.instances['cantilever_slab-1'].vertices.getSequenceFromMask(
    mask=('[#80 ]', ), )), u1=UNSET, u2=0.0, u3=0.0, ur1=0.0, ur2=0.0, ur3=0.0)
mdb.models['Model-1'].boundaryConditions['BC-2'].move('dynamic', 'Initial')
mdb.models['Model-1'].boundaryConditions['BC-2'].setValuesInStep(stepName=
    'dynamic', u1=-0.4)
mdb.models['Model-1'].boundaryConditions['BC-2'].setValues(u1=SET)
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(u1=SET)
mdb.models['Model-1'].boundaryConditions['BC-1'].setValuesInStep(stepName=
    'dynamic', u1=-0.4)
# Save by mofid on 2024_07_09-15.33.24; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'POSITION OF REBAR IN THE SHELL SECTION THICKNESS DIRECTION IS GIVEN AS THE DISTANCE OF THE REBAR FROM THE MIDDLE SURFACE OF THE SHELL. REBAR WAVE_LAYER LIES OUTSIDE THE SHELL SECTION THICKNESS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY__PICKEDSET11 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-1'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-2'].suppress()
# Save by mofid on 2024_07_09-15.34.04; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'POSITION OF REBAR IN THE SHELL SECTION THICKNESS DIRECTION IS GIVEN AS THE DISTANCE OF THE REBAR FROM THE MIDDLE SURFACE OF THE SHELL. REBAR WAVE_LAYER LIES OUTSIDE THE SHELL SECTION THICKNESS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 9264, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 26.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 12.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Jul  9 15:34:25 2024', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'POSITION OF REBAR IN THE SHELL SECTION THICKNESS DIRECTION IS GIVEN AS THE DISTANCE OF THE REBAR FROM THE MIDDLE SURFACE OF THE SHELL. REBAR WAVE_LAYER LIES OUTSIDE THE SHELL SECTION THICKNESS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8948, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.001, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.00025, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['dynamic'].setValues(initialInc=0.01, maxInc=0.01, 
    maxNumInc=1000, minInc=0.0001)
# Save by mofid on 2024_07_09-15.35.51; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'POSITION OF REBAR IN THE SHELL SECTION THICKNESS DIRECTION IS GIVEN AS THE DISTANCE OF THE REBAR FROM THE MIDDLE SURFACE OF THE SHELL. REBAR WAVE_LAYER LIES OUTSIDE THE SHELL SECTION THICKNESS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 5460, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.01, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.0025, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.000625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.00015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['dynamic'].setValues(noStop=OFF, nohaf=OFF, 
    timeIncrementationMethod=FIXED)
# Save by mofid on 2024_07_09-15.37.12; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'POSITION OF REBAR IN THE SHELL SECTION THICKNESS DIRECTION IS GIVEN AS THE DISTANCE OF THE REBAR FROM THE MIDDLE SURFACE OF THE SHELL. REBAR WAVE_LAYER LIES OUTSIDE THE SHELL SECTION THICKNESS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 11800, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Fixed time increment is too large', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['dynamic'].setValues(maxNumInc=20)
# Save by mofid on 2024_07_09-15.37.58; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'POSITION OF REBAR IN THE SHELL SECTION THICKNESS DIRECTION IS GIVEN AS THE DISTANCE OF THE REBAR FROM THE MIDDLE SURFACE OF THE SHELL. REBAR WAVE_LAYER LIES OUTSIDE THE SHELL SECTION THICKNESS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 1716, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Fixed time increment is too large', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['dynamic'].setValues(maxNumInc=2)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'POSITION OF REBAR IN THE SHELL SECTION THICKNESS DIRECTION IS GIVEN AS THE DISTANCE OF THE REBAR FROM THE MIDDLE SURFACE OF THE SHELL. REBAR WAVE_LAYER LIES OUTSIDE THE SHELL SECTION THICKNESS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8480, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Fixed time increment is too large', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['dynamic'].setValues(initialInc=0.0001)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'POSITION OF REBAR IN THE SHELL SECTION THICKNESS DIRECTION IS GIVEN AS THE DISTANCE OF THE REBAR FROM THE MIDDLE SURFACE OF THE SHELL. REBAR WAVE_LAYER LIES OUTSIDE THE SHELL SECTION THICKNESS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 4788, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Fixed time increment is too large', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['dynamic'].setValues(initialInc=10.0, maxNumInc=20, 
    noStop=OFF, nohaf=OFF, timePeriod=10.0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SPECIFIED POISSONS RATIO VALUE OF 0.50000 IS OR VERY CLOSE TO 0.5. THIS VALUE WILL BE RESET TO 0.4999999.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'POSITION OF REBAR IN THE SHELL SECTION THICKNESS DIRECTION IS GIVEN AS THE DISTANCE OF THE REBAR FROM THE MIDDLE SURFACE OF THE SHELL. REBAR WAVE_LAYER LIES OUTSIDE THE SHELL SECTION THICKNESS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY__PICKEDSET11 HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\0-wave-propagation\\DirectoryName-slab-wave\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 12448, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 32.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 19.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CANTILEVER_SLAB-1.407 D.O.F. 3 ratio = 4.87028E+09.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CANTILEVER_SLAB-1.407 D.O.F. 3 ratio = 13.5427E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CANTILEVER_SLAB-1.407 D.O.F. 3 ratio = 4.91047E+09.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Fixed time increment is too large', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['dynamic'].setValues(initialInc=2.0, maxNumInc=1, 
    timePeriod=2.0)
# Save by mofid on 2024_07_09-15.43.53; build 2023 2022_09_28-21.41.55 183150
